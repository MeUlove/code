//利用归并排序
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
int n;
int a[10000010];
long long tot;//记得开longlong 
void merge(int l,int m,int r)//排序 
{
	int n1=m-l+1,n2=r-m;//找到前和后的个数 
	int a1[n1+1],a2[n2+1];
	for(int i=1;i<=n1;i++)a1[i]=a[l+i-1];
	for(int i=1;i<=n2;i++)a2[i]=a[m+i];
	int ii=1,jj=1,k=l;//设置指针 
	while(ii<=n1&&jj<=n2)//通过指针，进行排序 
	{
		if(a1[ii]>a2[jj])//便于求逆序对 
		{
			tot+=n1-ii+1;//求逆序对 ,a1[ii]>a2[jj]满足逆序对的定义 
			//在进行归并排序时，两个子序列为有序的，而
			//当a2[jj]<a1[ii]时,a1序列中，ii-n1对应的数都大于a2[jj],共有(n1-ii+1)个逆序对
			//每次将子序列合并时进行比较判断，进行计算，在排序中就求出了逆序对数，
			//效率和归并排序的效率一样，比较小 ,O(nlogn);
			a[k]=a2[jj];
			jj++;
		}
		else 
		{
			a[k]=a1[ii];
			ii++;
		}
		k++;
	}
	while(ii<=n1)//如果一边放完了，另一边直接全部放入 
	{
		a[k]=a1[ii];
		ii++;
		k++;
	}
	while(jj<=n2)
	{
		a[k]=a2[jj];
		jj++;
		k++;
	}
}
void mergesort(int l,int r)//运用分治法，分成子序列，使子序列有序 
{
	if(l<r)
	{
		int m=(l+r)/2;//进行分治 
		mergesort(l,m);
		mergesort(m+1,r);
		merge(l,m,r);//开始排序 
	}
	//如果l==r，则分到只有一个数，不用进行比较，返回上一步 
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)scanf("%d",&a[i]);
	mergesort(1,n);//利用归并排序求逆序对 
	printf("%lld",tot);
	return 0;
}
